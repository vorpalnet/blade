<mxEditor defaultGroup="group" defaultEdge="edge"
	helpWindowImage="images/help.gif" tasksWindowImage="images/tasks.gif"
	forcedInserting="0" swimlaneRequired="0">
	<include name="config/editor-commons.xml" />
	<add as="onInit">
		function ()
		{
		this.showTasks();
		}
	</add>
	<Array as="cycleAttributeValues">
		<add value="#83027F" />
		<add value="#66B922" />
		<add value="#808913" />
		<add value="#CF0056" />
		<add value="#4679B6" />
	</Array>
	<Array as="templates">
		<add as="group">
			<Group label="" description="" href="">
				<mxCell vertex="1" style="group" connectable="0" />
			</Group>
		</add>
		<add as="edge">
			<Transition label="" description="">
				<mxCell edge="1">
					<mxGeometry as="geometry" relative="1" />
				</mxCell>
			</Transition>
		</add>
		<add as="swimlane">
			<Swimlane label="Swimlane" description="" href="">
				<mxCell vertex="1" style="swimlane" connectable="0">
					<mxGeometry as="geometry" width="300" height="160" />
				</mxCell>
			</Swimlane>
		</add>
		<add as="task">
			<Task label="Task" description="" href="">
				<mxCell vertex="1">
					<mxGeometry as="geometry" width="72" height="32" />
				</mxCell>
			</Task>
		</add>
		<add as="microservice">
			<Microservice label="" description=""
				href="">
				<mxCell vertex="1" style="rounded">
					<mxGeometry as="geometry" width="72" height="46" />
				</mxCell>
			</Microservice>
		</add>

		<add as="inbound">
			<Inbound label="Inbound Gateway" description="" href="">
				<mxCell vertex="1" style="">
					<mxGeometry as="geometry" width="72" height="46" />
				</mxCell>
			</Inbound>
		</add>


		<add as="ingress">
			<Ingress label="" description="" href="">
				<mxCell vertex="1" style="">
					<mxGeometry as="geometry" width="72" height="46"/>
				</mxCell>
			</Ingress>
		</add>

		<add as="egress">
			<Egress label="" description="" href="">
				<mxCell vertex="1" style="">
					<mxGeometry as="geometry" width="72" height="46" />
				</mxCell>
			</Egress>
		</add>

		<add as="subscriber">
			<Subscriber label="" description="" href="">
				<mxCell vertex="1" style="">
					<mxGeometry as="geometry" width="64" height="64" />
				</mxCell>
			</Subscriber>
		</add>
		
		<add as="authentication">
			<Authentication label="" description="" href="">
				<mxCell vertex="1" style="">
					<mxGeometry as="geometry" width="64" height="64" />
				</mxCell>
			</Authentication>
		</add>	
		
		<add as="reference">
			<Reference label="" description="" href="">
				<mxCell vertex="1" style="">
					<mxGeometry as="geometry" width="64" height="64" />
				</mxCell>
			</Reference>
		</add>			


		<add as="shape">
			<Shape label="" description="" href="">
				<mxCell vertex="1" style="ellipse">
					<mxGeometry as="geometry" width="32" height="32" />
				</mxCell>
			</Shape>
		</add>
		<add as="symbol">
			<Symbol label="Symbol" description="" href="">
				<mxCell vertex="1"
					style="symbol;image=images/symbols/event.png">
					<mxGeometry as="geometry" width="32" height="32" />
				</mxCell>
			</Symbol>
		</add>
	</Array>

	<add as="createTasks"><![CDATA[
		function (div)
		{
			console.log('createTasks...');
			
		// transition
		var transition = document.createElement('div');
		transition.id = 'Transition';
		transition.className = 'task';
		transition.style.display = 'none';
		div.appendChild(transition)
		$('#Transition').load('./transition.html #transition-view', function() {
			$('#transition-tabs').tabs();
		});

		// microservice
		var microservice = document.createElement('div');
		microservice.id = 'Microservice';
		microservice.className = 'task';
		microservice.style.display = 'none';
		div.appendChild(microservice)
		$('#Microservice').load('./microservice.html #microservice-view',
				function() {
					// initialize jquery tabs only after page has loaded
					$('#microservice-tabs').tabs();
				});

		// ingress
		var ingress = document.createElement('div');
		ingress.className = 'task';
		ingress.id = 'Ingress';
		ingress.style.display = 'none';
		div.appendChild(ingress)
		$('#Ingress').load('./ingress.html #ingress-view');

		// egress
		var egress = document.createElement('div');
		egress.className = 'task';
		egress.id = 'Egress';
		egress.style.display = 'none';
		div.appendChild(egress)
		$('#Egress').load('./egress.html #egress-view');			
			
			
		}
	]]></add>



	<add as="refreshTasks"><![CDATA[
	function (div)
{			

	console.log('refreshTasks...');
	if (this.tasks != null)
	{
		var title;
		
		$('.task').css('display','none');

		var selectedCell = this.graph.getSelectionCell();
		if(selectedCell != null){					
			title = this.graph.getSelectionCell().getValue().tagName;					
			this.tasks.setTitle( title );						
			// toggle visibility
			$('#'+title).css('display','block');
		
			aliceSelectedCell = selectedCell;
			aliceGraph = this.graph;
		}
		
		if(typeof previousTask !== 'undefined'){
			// save old task values
			console.log('saving values for task: '+previousTitle);
		}else{
			console.log('previousTask is undefined');
		}
		previousTask = div;
		previousTitle = title;
						
	}			
}
	]]></add>

	<add as="showTasks"><![CDATA[
		function (div)
{
	console.log('showTasks...');

	if (this.tasks == null) {
		var div = document.createElement('div');
		div.style.padding = '8px';

		var w = document.body.clientWidth;
		var wnd = new mxWindow(mxResources.get(this.tasksResource)
				|| this.tasksResource, div, w - 270, this.tasksTop, 250);
		wnd.setClosable(true);
		wnd.destroyOnClose = false;

		// Installs a function to update the contents
		// of the tasks window on every change of the
		// model, selection or root.
		var funct = mxUtils.bind(this, function(sender) {
			// mxEvent.release(div);
			// div.innerHTML = '';
			this.refreshTasks(div);
		});

		this.graph.getModel().addListener(mxEvent.CHANGE, funct);
		this.graph.getSelectionModel().addListener(mxEvent.CHANGE, funct);
		this.graph.addListener(mxEvent.ROOT, funct);

		// Assigns the icon to the tasks window
		if (this.tasksWindowImage != null) {
			wnd.setImage(this.tasksWindowImage);
		}

		this.tasks = wnd;

		this.createTasks(div);

	}

	this.tasks.setVisible(true);

}
	]]></add>


</mxEditor>
